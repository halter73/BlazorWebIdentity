@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWeb.Components.Pages.Identity.Account
@using BlazorWeb.Identity.Data

@inject SignInManager<BlazorWebUser> SignInManager
@inject NavigationManager NavigationManager

@if ((_externalLogins?.Count ?? 0) == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form id="external-account" method="post" class="form-horizontal" @formname="external-login" @onsubmit="OnSubmitExternalLoginAsync">
        <AntiforgeryToken />
        <div>
            <p>
                @foreach (var provider in _externalLogins!)
                {
                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                }
            </p>
        </div>
    </form>
}

@code {
    private IList<AuthenticationScheme>? _externalLogins;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = default!;

    [SupplyParameterFromForm]
    private string? Provider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ReturnUrl ??= "/";

        _externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    private async Task OnSubmitExternalLoginAsync()
    {
        var redirectUrl = NavigationManager.GetUriWithQueryParameters("/Identity/Account/ExternalLogin",
            new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl, ["Action"] = ExternalLogin.LoginCallbackAction });
        var properties = SignInManager.ConfigureExternalAuthenticationProperties(Provider!, redirectUrl);
        await HttpContext.ChallengeAsync(Provider!, properties);
    }
}
