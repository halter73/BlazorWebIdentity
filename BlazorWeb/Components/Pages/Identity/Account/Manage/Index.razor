@page "/Identity/Account/Manage"

@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity;
@using BlazorWeb.Identity.Data;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<BlazorWebUser> UserManager
@inject SignInManager<BlazorWebUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage Message="@_message" />

<div class="row">
    <div class="col-md-6">
        <EditForm id="profile-form" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="phone-number" @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private BlazorWebUser? _user;
    private string? _username;
    private string? _phoneNumber;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        (_user, _message) = await UserManager.GetUserAsync(AuthenticationStateTask);
        if (_user is null)
        {
            return;
        }

        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (_user is null)
        {
            return;
        }

        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                NavigationManager.RedirectToCurrentPage(new() { ["Message"] = "Unexpected error when trying to set phone number." });
                return;
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        NavigationManager.RedirectToCurrentPage(new() { ["Message"] = "Your profile has been updated" });
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
