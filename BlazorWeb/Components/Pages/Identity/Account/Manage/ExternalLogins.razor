@page "/Identity/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWeb.Identity.Data
@using Microsoft.AspNetCore.Mvc.ViewFeatures

@inject UserManager<BlazorWebUser> UserManager
@inject SignInManager<BlazorWebUser> SignInManager
@inject IUserStore<BlazorWebUser> UserStore
@inject NavigationManager NavigationManager

<PageTitle>Manage your external logins</PageTitle>

<StatusMessage Message="@_message" />
@if (_currentLogins?.Count > 0)
{
    <h3>Registered Logins</h3>
    <table class="table">
        <tbody>
            @foreach (var login in _currentLogins)
            {
                <tr>
                    <td id="login-provider-@login.LoginProvider">@login.ProviderDisplayName</td>
                    <td>
                        @if (_showRemoveButton)
                        {
                            <form id="remove-login-@login.LoginProvider" @formname="@RemoveLoginFormName" @onsubmit="OnSubmitRemoveLoginAsync" method="post">
                                <AntiforgeryToken />
                                <div>
                                    <input type="hidden" name="@nameof(RemoveLoginLoginProvider)" value="@login.LoginProvider" />
                                    <input type="hidden" name="@nameof(RemoveLoginProviderKey)" value="@login.ProviderKey" />
                                    <button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
                                </div>
                            </form>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (_otherLogins?.Count > 0)
{
    <h4>Add another service to log in.</h4>
    <hr />
    <form id="link-login-form" class="form-horizontal" @formname="@LinkLoginFormName" @onsubmit="OnSubmitLinkLoginAsync" method="post">
        <AntiforgeryToken />
        <div id="socialLoginList">
            <p>
                @foreach (var provider in _otherLogins)
                {
                    <button
                        id="link-login-button-@provider.Name"
                        type="submit"
                        class="btn btn-primary"
                        name="@nameof(LinkLoginProvider)"
                        value="@provider.Name"
                        title="Log in using your @provider.DisplayName account">
                        @provider.DisplayName
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    private const string RemoveLoginFormName = "remove-login";
    private const string LinkLoginFormName = "link-login";
    private const string LinkLoginCallbackAction = "LinkLoginCallback";

    private string? _message;
    private BlazorWebUser? _user;
    private IList<UserLoginInfo>? _currentLogins;
    private IList<AuthenticationScheme>? _otherLogins;
    private bool _showRemoveButton;

    [SupplyParameterFromForm(FormName = RemoveLoginFormName)]
    private string? RemoveLoginLoginProvider { get; set; }

    [SupplyParameterFromForm(FormName = RemoveLoginFormName)]
    private string? RemoveLoginProviderKey { get; set; }

    [SupplyParameterFromForm(FormName = LinkLoginFormName)]
    private string? LinkLoginProvider { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        (_user, _message) = await UserManager.GetUserAsync(AuthenticationStateTask);
        if (_user is null)
        {
            return;
        }

        _currentLogins = await UserManager.GetLoginsAsync(_user);
        _otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => _currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<BlazorWebUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(_user, HttpContext.RequestAborted);
        }

        _showRemoveButton = passwordHash is not null || _currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
            return;
        }
    }

    private async Task OnSubmitRemoveLoginAsync()
    {
        if (_user is null)
        {
            return;
        }

        var result = await UserManager.RemoveLoginAsync(_user, RemoveLoginLoginProvider!, RemoveLoginProviderKey!);
        if (!result.Succeeded)
        {
            NavigationManager.ReloadWithMessage("The external login was not removed.");
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        NavigationManager.ReloadWithMessage("The external login was removed.");
    }

    private async Task OnSubmitLinkLoginAsync()
    {
        if (_user is null)
        {
            return;
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        var userId = await UserManager.GetUserIdAsync(_user);
        var redirectUrl = NavigationManager.GetUriWithQueryParameter(nameof(Action), LinkLoginCallbackAction);
        var properties = SignInManager.ConfigureExternalAuthenticationProperties(LinkLoginProvider!, redirectUrl, userId);
        await HttpContext.ChallengeAsync(LinkLoginProvider!, properties);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        if (_user is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info == null)
        {
            NavigationManager.ReloadWithMessage($"Unexpected error occurred loading external login info.");
            return;
        }

        var result = await UserManager.AddLoginAsync(_user, info);
        if (!result.Succeeded)
        {
            NavigationManager.ReloadWithMessage("The external login was not added. External logins can only be associated with one account.");
            return;
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        NavigationManager.ReloadWithMessage("The external login was added.");
    }
}
