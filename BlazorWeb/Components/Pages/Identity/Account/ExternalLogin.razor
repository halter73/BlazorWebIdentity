@page "/Identity/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWeb.Identity.Data

@inject SignInManager<BlazorWebUser> SignInManager
@inject UserManager<BlazorWebUser> UserManager
@inject IUserStore<BlazorWebUser> UserStore
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager
@inject ILogger<ExternalLogin> Logger

@{
    var providerDisplayName = _externalLoginInfo.ProviderDisplayName;
}

<PageTitle>Register</PageTitle>

<StatusMessage Message="@_message" />
<h1>Register</h1>
<h2 id="external-login-title">Associate your @providerDisplayName account.</h2>
<hr />

<p id="external-login-description" class="text-info">
    You've successfully authenticated with <strong>@providerDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</p>

<div class="row">
    <div class="col-md-4">
        <EditForm id="confirmation-form" Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email." />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? _message;
    private ExternalLoginInfo _externalLoginInfo = default!;
    private IUserEmailStore<BlazorWebUser> _emailStore = default!;

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Action { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        ReturnUrl ??= "/";

        if (RemoteError is not null)
        {
            NavigationManager.NavigateToWithMessage("Identity/Account/Login", "Error from external provider: " + RemoteError);
            return;
        }

        var externalLoginInfo = await SignInManager.GetExternalLoginInfoAsync();
        if (externalLoginInfo is null)
        {
            NavigationManager.NavigateToWithMessage("Identity/Account/Login", "Error loading external login information.");
            return;
        }

        _externalLoginInfo = externalLoginInfo;
        _emailStore = GetEmailStore();

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            NavigationManager.NavigateTo("Identity/Account/Login");
            return;
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            _externalLoginInfo.LoginProvider,
            _externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);
        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                _externalLoginInfo.Principal.Identity?.Name,
                _externalLoginInfo.LoginProvider);
            NavigationManager.NavigateTo(ReturnUrl);
            return;
        }

        if (result.IsLockedOut)
        {
            NavigationManager.NavigateTo("/Identity/Account/Lockout");
            return;
        }

        // If the user does not have an account, then ask the user to create an account.
        if (_externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = _externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await _emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, _externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", _externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    $"{NavigationManager.BaseUri}Identity/Account/ConfirmEmail",
                    new Dictionary<string, object?> { { "userId", userId }, { "code", code } });
                await EmailSender.SendEmailAsync(Input.Email!, "Confirm your email",
                    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    var confirmationUrl = NavigationManager.GetUriWithQueryParameters(
                        $"{NavigationManager.BaseUri}Identity/Account/RegisterConfirmation",
                        new Dictionary<string, object?> { ["Email"] = Input.Email });
                    NavigationManager.NavigateTo(confirmationUrl);
                    return;
                }

                await SignInManager.SignInAsync(user, isPersistent: false, _externalLoginInfo.LoginProvider);
                NavigationManager.NavigateTo(ReturnUrl);
                return;
            }
        }
        else
        {
            _message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
        }
    }

    private BlazorWebUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<BlazorWebUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(BlazorWebUser)}'. " +
                $"Ensure that '{nameof(BlazorWebUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<BlazorWebUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<BlazorWebUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }
    }
}
